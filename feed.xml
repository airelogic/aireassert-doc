<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://docs.aireassert.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://docs.aireassert.com/" rel="alternate" type="text/html" /><updated>2023-01-30T10:30:38+00:00</updated><id>https://docs.aireassert.com/feed.xml</id><title type="html">AireAssert Docs</title><subtitle>AireAssert documentation and knowledge-base</subtitle><entry><title type="html">Introducing AireGlu adapters</title><link href="https://docs.aireassert.com/adapters/" rel="alternate" type="text/html" title="Introducing AireGlu adapters" /><published>2021-03-10T00:00:00+00:00</published><updated>2021-03-10T00:00:00+00:00</updated><id>https://docs.aireassert.com/adapters</id><content type="html" xml:base="https://docs.aireassert.com/adapters/"><![CDATA[<p>In the upcoming AireGlu v1.23.0 release we will be introducing new functionality to greatly increase the extensibility of the platform. Using AireGlu Adapters, you will be able to implement custom task behaviours as code plugins. This will allow your technical staff to create integration adapters that can access all of the power and flexibility of the C# language, and associated libraries.</p>

<h2 id="how-does-it-work">How does it work?</h2>
<p>By referencing a public nuget package, you will be able to implement the interface required to produce an AireGlu adapter. For self-hosted customers, you will then be able to install the plugin assembly to your local installation and make use of it immediately. For SaaS customers, you will need to go through a light-touch approval process with our team, after which your adapter will become available on your cloud environment.</p>

<h2 id="why-is-this-useful">Why is this useful?</h2>
<p>AireGlu task behaviours are already very powerful, and can be combined to cover a wide range of integration scenarios. However, in some cases a lower-level implementation is needed, either to contain the complexity of the integration task at hand, or to make use of libraries and programming language features.</p>]]></content><author><name>David Bond</name></author><category term="Extensibility" /><category term="Advanced" /><category term="Integration" /><summary type="html"><![CDATA[In the upcoming AireGlu v1.23.0 release we will be introducing new functionality to greatly increase the extensibility of the platform. Using AireGlu Adapters, you will be able to implement custom task behaviours as code plugins. This will allow your technical staff to create integration adapters that can access all of the power and flexibility of the C# language, and associated libraries.]]></summary></entry></feed>