import{_ as i,c as s,o as a,a4 as n}from"./chunks/framework.ttppV29E.js";const E=JSON.parse('{"title":"AireGlu Commands","description":"","frontmatter":{},"headers":[],"relativePath":"docs/command-library/aireglu-commands.md","filePath":"docs/command-library/aireglu-commands.md","lastUpdated":1754908353000}'),e={name:"docs/command-library/aireglu-commands.md"},t=n(`<h1 id="aireglu-commands" tabindex="-1">AireGlu Commands <a class="header-anchor" href="#aireglu-commands" aria-label="Permalink to &quot;AireGlu Commands&quot;">​</a></h1><p>A library of test commands to use when testing <code>AireGlu</code>.</p><h2 id="invoking-an-aireglu-endpoint" tabindex="-1">Invoking an AireGlu endpoint <a class="header-anchor" href="#invoking-an-aireglu-endpoint" aria-label="Permalink to &quot;Invoking an AireGlu endpoint&quot;">​</a></h2><p>You can invoke an AireGlu endpoint by providing an endpoint name, which can be found on the Endpoints page on your AireGlu instance.</p><p>You will also need a payload to send to AireGlu, the supported types are XML and Json. Add an XML or Json file within an &#39;AireGluPayloads&#39; directory in your Test Set.</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aireglu-commands</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   Configuration.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	aireglu-commands.feature</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AireGluPayloads</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       payload</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       payload</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.xml</span></span></code></pre></div><p>The filenames excluding the file extension must be unique.</p><p>Now we are ready to invoke the endpoint. In the example below we are invoking an AireGlu endpoint with the endpoint name of <strong>&#39;test-endpoint&#39;</strong> and sending the payload <strong>payload-1</strong> (do not include the file extension).</p><div class="language-gherkin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gherkin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">When </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we invoke endpoint </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test-endpoint&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> with payload </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;payload-1&#39;</span></span></code></pre></div><p>This will pass if AireGlu returns a</p><h2 id="payload-templates" tabindex="-1">Payload Templates <a class="header-anchor" href="#payload-templates" aria-label="Permalink to &quot;Payload Templates&quot;">​</a></h2><p>Your payloads can be templatable. In your payload, use the --*TOKENNAME*-- format to show where data can be passed in. For example:</p><p><strong>payload-2.xml</strong></p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">agent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;--*Id*--&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;--*Name*--&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">agent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>The payloads can be overloaded in the .feature file:</p><div class="language-gherkin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gherkin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">When </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we invoke endpoint </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test-endpoint&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> with payload </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;payload-2&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	| Id		| 123		|</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	| Name		| John Doe	|</span></span></code></pre></div><h2 id="test-an-existing-endpoint-invocation" tabindex="-1">Test an existing endpoint invocation <a class="header-anchor" href="#test-an-existing-endpoint-invocation" aria-label="Permalink to &quot;Test an existing endpoint invocation&quot;">​</a></h2><p>If you know the transaction Id, you can also test an existing endpoint invocation with the following command:</p><div class="language-gherkin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gherkin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Given </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we executed an endpoint with transaction </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> at </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2023-01-01T12:00:00.000Z&#39;</span></span></code></pre></div><h2 id="endpoint-structure" tabindex="-1">Endpoint Structure <a class="header-anchor" href="#endpoint-structure" aria-label="Permalink to &quot;Endpoint Structure&quot;">​</a></h2><p>When talking about endpoints it is useful to understand how an endpoint is structured. It will have this format:</p><ul><li>Endpoint <ul><li>Tasks <ul><li>Action name: This is one of the following: <ul><li>EndpointInvocation</li><li>NonExistantEndpointInvocation</li><li>EndpointValidationFailure</li><li>EndpointException</li><li>EndpointAuthentication</li><li>EndpointAuthenticationFailure</li><li>EndpointManagementAuthenticationFailure</li><li>EndpointTaskSuccess</li><li>EndpointTaskInvocationDemoMode</li><li>EndpointTaskFailure</li><li>EndpointTaskSkipped</li><li>EndpointTaskBegins</li><li>EndpointResponds</li><li>FaxReceivingFailed</li><li>MESHMessageReceived</li><li>EmailMessageReceived</li><li>ReceiverException</li><li>EmailAttachmentExtractionError</li><li>EndpointValidationSuccess</li><li>EndpointTaskValuesResolved</li><li>EmailMessageProcessed</li><li>EmailMessageRejected</li><li>EmailMessageAccepted</li><li>EndpointInvocationFailure</li><li>MESHMessageProcessed</li><li>MESHMessageRejected</li><li>MESHMessageAccepted</li></ul></li><li>Task label: A description of the task</li><li>Debug data: Further debug-level data describing the task actions</li></ul></li></ul></li></ul><p>So an endpoint can have 1 or more Tasks, which each execute an Action. We can access the debug data for each of these as discussed below.</p><h2 id="how-do-i-know-that-the-invocation-of-an-endpoint-is-the-one-i-am-looking-for" tabindex="-1">How do I know that the invocation of an endpoint is the one I am looking for? <a class="header-anchor" href="#how-do-i-know-that-the-invocation-of-an-endpoint-is-the-one-i-am-looking-for" aria-label="Permalink to &quot;How do I know that the invocation of an endpoint is the one I am looking for?&quot;">​</a></h2><p>Glad you asked! When we submit an AireForm, a <strong>Transaction ID</strong> is given to us, which we track internally. When you run any of the following commands this Transaction ID is included for you, ensuring that you are always asserting on the correct endpoint invocation.</p><h2 id="commands" tabindex="-1">Commands <a class="header-anchor" href="#commands" aria-label="Permalink to &quot;Commands&quot;">​</a></h2><div class="language-gherkin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gherkin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Then </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">the aireglu endpoint </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*endpoint*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logs action </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*action-name*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> within *seconds* seconds</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Then </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">the aireglu endpoint </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*endpoint*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logs actions within *seconds* seconds</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	| *action-name* |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	| *action-name* |</span></span></code></pre></div><p>Checks that the specified endpoint has executed tasks with matching action names within the given timeframe.</p><div class="language-gherkin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gherkin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Then </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">the aireglu endpoint </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*endpoint*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> does not log action </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*action-name*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> within *seconds* seconds</span></span></code></pre></div><p>Checks that the specified endpoint has not executed a task with a matching action name within the given timeframe. Be careful with this assertion - as it has to wait the entire length of time you specify before the assertion passes it can seriously slow down your tests. Use only when really necessary!</p><div class="language-gherkin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gherkin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Then </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">the </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*task-label*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> task of aireglu endpoint </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*endpoint*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> succeeds within *seconds* seconds</span></span></code></pre></div><p>Checks that a task with a matching label has been executed within the given timeframe. This will also set the matching task as the <strong>current task</strong> - which means that the following assertions will match against it&#39;s debug data.</p><div class="language-gherkin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gherkin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Then </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">the task sends data in a valid format</span></span></code></pre></div><p>Checks that the <strong>current task</strong> has submitted its data in a format matching the template in your tests AireGlu Config (todo: link). This template will need to be defined before you can run this assertion!</p><div class="language-gherkin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gherkin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Then </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">the task sets </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*task-variable*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*expected-value*&#39;</span></span></code></pre></div><p>Checks that the <strong>current task&#39;s</strong> submitted data contains the expected variable. This requires a template for the AireGlu task to be defined in config (todo: link) before you can run the assertion.</p>`,36),l=[t];function h(o,p,d,k,r,c){return a(),s("div",null,l)}const u=i(e,[["render",h]]);export{E as __pageData,u as default};
