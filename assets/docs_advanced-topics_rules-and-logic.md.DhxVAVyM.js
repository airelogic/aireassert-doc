import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.ttppV29E.js";const E=JSON.parse('{"title":"Rules and Logic","description":"","frontmatter":{},"headers":[],"relativePath":"docs/advanced-topics/rules-and-logic.md","filePath":"docs/advanced-topics/rules-and-logic.md","lastUpdated":1751009495000}'),n={name:"docs/advanced-topics/rules-and-logic.md"},t=e(`<h1 id="rules-and-logic" tabindex="-1">Rules and Logic <a class="header-anchor" href="#rules-and-logic" aria-label="Permalink to &quot;Rules and Logic&quot;">​</a></h1><h3 id="form-control-names" tabindex="-1">Form Control Names <a class="header-anchor" href="#form-control-names" aria-label="Permalink to &quot;Form Control Names&quot;">​</a></h3><p>When writing feature files in AireAssert, avoid using question marks (<code>?</code>) and apostrophes (<code>&#39;</code>) in your test commands. Including these will cause the test to fail.</p><blockquote><p><strong>Note:</strong> Although your form’s field labels may include question marks (<code>?</code>) and apostrophes (<code>&#39;</code>), you must <strong>omit</strong> these characters when referencing fields in your steps.</p></blockquote><h4 id="example-of-a-failing-scenario" tabindex="-1">Example of a Failing Scenario <a class="header-anchor" href="#example-of-a-failing-scenario" aria-label="Permalink to &quot;Example of a Failing Scenario&quot;">​</a></h4><div class="language-gherkin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gherkin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Scenario</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Complete Form</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Given </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we are completing the testing eform</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  When </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we set </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Testing?&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Yes&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Then </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;control-1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> is not empty</span></span></code></pre></div><h4 id="corrected-scenario" tabindex="-1">Corrected Scenario <a class="header-anchor" href="#corrected-scenario" aria-label="Permalink to &quot;Corrected Scenario&quot;">​</a></h4><p>Remove the question mark from the field label:</p><div class="language-gherkin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gherkin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Scenario</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Complete Form</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Given </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we are completing the testing eform</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  When </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we set </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Testing&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Yes&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Then </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;control-1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> is not empty</span></span></code></pre></div><h4 id="other-symbols" tabindex="-1">Other Symbols <a class="header-anchor" href="#other-symbols" aria-label="Permalink to &quot;Other Symbols&quot;">​</a></h4><p>All other punctuation and symbols are supported. For example, an exclamation mark is fine:</p><div class="language-gherkin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gherkin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Scenario</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Complete Form</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Given </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we are completing the testing eform</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  When </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we set </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Testing!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Yes&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Then </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;control-1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> is not empty</span></span></code></pre></div><h3 id="referencing-controls-by-id" tabindex="-1">Referencing Controls by ID <a class="header-anchor" href="#referencing-controls-by-id" aria-label="Permalink to &quot;Referencing Controls by ID&quot;">​</a></h3><p>As an alternative to labels, you can reference controls using their building block and control name:</p><div class="language-gherkin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gherkin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">When </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we set </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;building-block-name-control-name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Yes&#39;</span></span></code></pre></div>`,15),l=[t];function h(o,r,p,k,d,c){return a(),i("div",null,l)}const m=s(n,[["render",h]]);export{E as __pageData,m as default};
