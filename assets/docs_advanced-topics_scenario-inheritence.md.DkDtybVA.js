import{_ as s,c as i,o as e,a4 as a}from"./chunks/framework.ttppV29E.js";const E=JSON.parse('{"title":"Scenario Inheritance","description":"Learn how to reuse Gherkin scenarios in AireAssert using scenario inheritance to remove duplication and streamline your test suites.","frontmatter":{"title":"Scenario Inheritance","description":"Learn how to reuse Gherkin scenarios in AireAssert using scenario inheritance to remove duplication and streamline your test suites."},"headers":[],"relativePath":"docs/advanced-topics/scenario-inheritence.md","filePath":"docs/advanced-topics/scenario-inheritence.md","lastUpdated":1754908353000}'),n={name:"docs/advanced-topics/scenario-inheritence.md"},t=a(`<h1 id="scenario-inheritance" tabindex="-1">Scenario Inheritance <a class="header-anchor" href="#scenario-inheritance" aria-label="Permalink to &quot;Scenario Inheritance&quot;">​</a></h1><p>Scenario Inheritance in <strong>AireAssert</strong> allows you to reuse scenarios across multiple features, reducing duplication and making your Gherkin files easier to maintain.</p><h2 id="table-of-contents" tabindex="-1">Table of Contents <a class="header-anchor" href="#table-of-contents" aria-label="Permalink to &quot;Table of Contents&quot;">​</a></h2><ul><li><a href="#overview">Overview</a></li><li><a href="#how-it-works">How It Works</a></li><li><a href="#referencing-another-scenario">Referencing Another Scenario</a></li><li><a href="#file-location-requirements">File Location Requirements</a></li><li><a href="#multiple-inheritance">Multiple Inheritance</a></li><li><a href="#step-files">Step Files</a></li></ul><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>One of the main goals of <strong>AireAssert</strong> is to eliminate boilerplate code so you can focus directly on testing.</p><p>However, we noticed that scenario writers were often duplicating large chunks of Gherkin. <strong>Scenario Inheritance</strong> solves this by allowing one scenario to run another scenario as part of its setup.</p><h2 id="how-it-works" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How It Works&quot;">​</a></h2><p>Scenario inheritance lets a scenario <strong>include</strong> and <strong>run</strong> another scenario before adding its own steps.</p><p>For example, let’s say we have a feature file that completes <strong>Page One</strong> of a form:</p><div class="language-gherkin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gherkin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Feature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> First Feature</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Scenario</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Complete Page One</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Given </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we are completing the </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;totally-fictional&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eform</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  When </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we set </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;First name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Testy&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  And </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we set </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Last name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;McTest&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  And </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we move to the next page of the form</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Then </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Page two&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> is shown</span></span></code></pre></div><h2 id="referencing-another-scenario" tabindex="-1">Referencing Another Scenario <a class="header-anchor" href="#referencing-another-scenario" aria-label="Permalink to &quot;Referencing Another Scenario&quot;">​</a></h2><p>Now we want to test Page Two. Instead of duplicating the setup above, we can reference the first scenario:</p><div class="language-gherkin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gherkin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ Import: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;FirstFeature.feature&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Feature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Second Feature</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Scenario</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Complete Page Two</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Given </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we have run scenario </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Complete Page One&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  And </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we set </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Some field&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to anything</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  And </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we move to the next page of the form</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Then </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Page three&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> is shown</span></span></code></pre></div><p>When you run your test set, Complete Page Two will run all the steps from Complete Page One, then add its own steps. Multiple Inheritance</p><p>You can chain scenarios together with multiple layers of inheritance.</p><p>For example, we can add a third feature that inherits from the second:</p><div class="language-gherkin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gherkin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ Import: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;SecondFeature.feature&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Feature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Third Feature</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Scenario</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Complete Page Three</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Given </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we have run scenario </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Complete Page Two&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  And </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we set </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Another field&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to anything</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  And </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we move to the next page of the form</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Then </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Page four&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> is shown</span></span></code></pre></div><p>When this runs, all three scenarios will execute in sequence.</p><h2 id="file-location-requirements" tabindex="-1">File Location Requirements <a class="header-anchor" href="#file-location-requirements" aria-label="Permalink to &quot;File Location Requirements&quot;">​</a></h2><p>When using scenario inheritance, the imported file must be in the same folder as the file that references it.</p><p>This is because <strong>AireAssert</strong> resolves imports relative to the referencing file’s location.</p><h3 id="✅-correct-folder-structure" tabindex="-1">✅ Correct Folder Structure <a class="header-anchor" href="#✅-correct-folder-structure" aria-label="Permalink to &quot;✅ Correct Folder Structure&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>features/</span></span>
<span class="line"><span>  FirstFeature.feature</span></span>
<span class="line"><span>  SecondFeature.feature</span></span></code></pre></div><p>SecondFeature.feature can import FirstFeature.feature directly.</p><h3 id="❌-incorrect-folder-structure" tabindex="-1">❌ Incorrect Folder Structure <a class="header-anchor" href="#❌-incorrect-folder-structure" aria-label="Permalink to &quot;❌ Incorrect Folder Structure&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>features/</span></span>
<span class="line"><span>  FirstFeature.feature</span></span>
<span class="line"><span>subfolder/</span></span>
<span class="line"><span>  SecondFeature.feature</span></span></code></pre></div><p>SecondFeature.feature will not resolve FirstFeature.feature because they are in different folders.</p><h2 id="step-files" tabindex="-1">Step Files <a class="header-anchor" href="#step-files" aria-label="Permalink to &quot;Step Files&quot;">​</a></h2><p>Sometimes you want to create a common block of steps for reuse without it ever being run alone.</p><p>In that case, name your file with the <code>.steps</code> extension instead of <code>.feature</code>. You can still import and reference it in other scenarios as normal.</p><div class="language-gherkin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gherkin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Scenario</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Imported Step</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Given </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we are completing the </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;some-form&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eform</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  When </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we set </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Field-1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;something&#39;</span></span></code></pre></div><p>and then:</p><div class="language-gherkin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gherkin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ Import: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MyStepsForImport.steps&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Feature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Inheriting Feature</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Scenario</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Example Scenario</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Given </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we have run scenario </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Imported Step&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  And </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we set </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Field-2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;another value&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Then </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Next page&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> is shown</span></span></code></pre></div>`,34),h=[t];function l(r,p,o,k,c,d){return e(),i("div",null,h)}const u=s(n,[["render",l]]);export{E as __pageData,u as default};
